#!/bin/sh -e
#upstart-job

case "$1" in
    start)
        echo -n "Starting applianceFirstRun...\n"
	if [ -f /var/db/.applianceSetupDone ]; then
		echo "Appliance First Run already completed."
	else

        # Enable apache on SSL
		a2ensite default-ssl
		/etc/init.d/apache2 restart

		#Create the .applianceSetupDone file in /var/db so this doesn't run again
		if [ -d /var/db ]; then
			touch /var/db/.applianceSetupDone
		else
			mkdir /var/db
			touch /var/db/.applianceSetupDone
		fi
	fi
 ;;
    stop)
        echo -n "Stopping applianceFirstRun "
        ## Stop daemon with killproc(8) and if this fails
        ## killproc sets the return value according to LSB.

        #killproc -TERM $BAR_BIN

        # Remember status and be verbose
        #rc_status -v
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        #$0 stop
        #$0 start

        # Remember status and be quiet
        #rc_status
        ;;
    reload)
        # If it supports signaling:
        echo -n "Reload service bar "
        #killproc -HUP $BAR_BIN
        #touch /var/run/BAR.pid
        #rc_status -v

        ## Otherwise if it does not support reload:
        #rc_failed 3
        #rc_status -v
        ;;
    status)
        echo -n "Checking for service bar "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Return value is slightly different for the status command:
        # 0 - service up and running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running (unused)
        # 4 - service status unknown :-(
        # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)

        # NOTE: checkproc returns LSB compliant status values.
        #checkproc $BAR_BIN
        # NOTE: rc_status knows that we called this init script with
        # "status" option and adapts its messages accordingly.
        #rc_status -v
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        echo "Usage: $0 {start|stop|status|restart|reload}"
        exit 1
        ;;
esac
